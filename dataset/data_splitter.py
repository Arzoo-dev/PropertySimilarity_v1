# WARNING: This script is deprecated. Use the split .txt files generated by data_preparation.py for subject selection in training.
import os
import random
from typing import List, Tuple
import logging
import json

logger = logging.getLogger(__name__)

class SubjectSplitter:
    def __init__(self, root_dir: str, train_ratio: float = 0.8, random_seed: int = 42):
        logger.info(f"Initializing SubjectSplitter with train_ratio={train_ratio}, random_seed={random_seed}")
        self.root_dir = root_dir
        self.train_ratio = train_ratio
        self.random_seed = random_seed
        random.seed(random_seed)
        
        # Get all subject folders
        self.subject_folders = [d for d in os.listdir(root_dir) 
                              if os.path.isdir(os.path.join(root_dir, d)) and d.startswith('subject_')]
        logger.info(f"Found {len(self.subject_folders)} total subject folders")

    def split_subjects(self) -> Tuple[List[str], List[str]]:
        """Split subjects into training and validation sets."""
        logger.info("Starting subject splitting process...")
        
        # Shuffle subjects
        random.shuffle(self.subject_folders)
        
        # Calculate split point
        split_idx = int(len(self.subject_folders) * self.train_ratio)
        train_subjects = self.subject_folders[:split_idx]
        val_subjects = self.subject_folders[split_idx:]
        
        logger.info(f"Split complete - Training subjects: {len(train_subjects)}, Validation subjects: {len(val_subjects)}")
        
        # Verify each subject has required folders
        for subject in train_subjects + val_subjects:
            subject_path = os.path.join(self.root_dir, subject)
            required_folders = ['anchor', 'positive', 'negative']
            
            for folder in required_folders:
                folder_path = os.path.join(subject_path, folder)
                if not os.path.exists(folder_path):
                    logger.warning(f"Missing required folder '{folder}' for subject: {subject}")
                else:
                    num_images = len([f for f in os.listdir(folder_path) 
                                    if f.endswith(('.jpg', '.jpeg', '.png'))])
                    logger.debug(f"Subject {subject} - {folder}: {num_images} images")
        
        # Save split information
        split_info = {
            'train_subjects': train_subjects,
            'val_subjects': val_subjects,
            'train_ratio': self.train_ratio,
            'random_seed': self.random_seed
        }
        
        with open('split_info.json', 'w') as f:
            json.dump(split_info, f, indent=4)

        return train_subjects, val_subjects
